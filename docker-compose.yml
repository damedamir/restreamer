services:
  # Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: restreamer_db
      POSTGRES_USER: restreamer_user
      POSTGRES_PASSWORD: restreamer123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - restreamer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U restreamer_user -d restreamer_db"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: always

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.final
    environment:
      DATABASE_URL: postgresql://restreamer_user:restreamer123@custom-restreamer-postgres-1:5432/restreamer_db
      PORT: 3001
      NODE_ENV: production
      CORS_ORIGIN: http://localhost:3000,https://hive.restreamer.website
      WEBHOOK_SECRET: your-secret-key
      JWT_SECRET: your-jwt-secret
      PUBLIC_HLS_URL: https://hive.restreamer.website/hls
    networks:
      - restreamer-network
      - nginx-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.simple
    networks:
      - restreamer-network
      - nginx-network
    restart: always

  # SRS Media Server
  srs:
    image: ossrs/srs:5
    ports:
      - "1935:1935"
      - "8080:8080"
    volumes:
      - ./nginx/srs-minimal.conf:/usr/local/srs/conf/srs.conf
    networks:
      - restreamer-network
    restart: always

volumes:
  postgres_data:

networks:
  restreamer-network:
    driver: bridge
  nginx-network:
    external: true
    name: my-server_web-proxy
